{"version":3,"sources":["redux/configureStore.js","components/asyncComponent/async.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","addDigit","addOperation","calculate","allClear","jquery__WEBPACK_IMPORTED_MODULE_0__","jquery__WEBPACK_IMPORTED_MODULE_0___default","n","redux__WEBPACK_IMPORTED_MODULE_1__","DIGIT","OPERATION","CAL","CLEAR","initialState","prev","next","result","exp","Number","$","text","operation","type","store","createStore","state","arguments","length","undefined","action","asyncComponent","getComponent","AsyncComponent","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","Component","inherits","createClass","key","value","_this2","then","setState","react_default","a","createElement","props","Display","e","bind","module","default","KeyPad","Calculator","id","React","App","es","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAAL,EAAAC,EAAAC,EAAA,sBAAAI,IAAA,IAAAC,EAAAP,EAAA,KAAAQ,EAAAR,EAAAS,EAAAF,GAAAG,EAAAV,EAAA,IAKMW,EAAO,QACPC,EAAW,YACXC,EAAK,MACLC,EAAO,QACPC,EAAe,CACfC,KAAO,EACPC,KAAO,EACPC,OAAS,EACTC,IAAMC,OAAOC,IAAE,YAAYC,QAC3BC,UAAY,KAIX,SAASpB,EAASc,EAAME,GAC7B,MAAO,CACLK,KAAMb,EACNM,KAAMA,EACNE,IAAKA,GAIF,SAASf,EAAaY,EAAMO,GACjC,MAAM,CACJC,KAAMZ,EACNI,KAAMA,EACNO,UAAWA,GAIR,SAASlB,EAAUa,GACxB,MAAM,CACJM,KAAMX,EACNK,OAAQA,GAIL,SAASZ,IACd,MAAM,CACJkB,KAAMV,EACNE,KAAM,EACNC,KAAM,GAiBV,IAAMQ,EAAQC,YAZd,WAA6C,IAA5BC,EAA4BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArBb,EAAcgB,EAAOH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3C,OAAOC,EAAOP,MACZ,KAAKb,EAAQ,MAAO,CAACK,KAAMW,EAAMX,KAAMC,KAAMc,EAAOd,KAAMC,OAAQS,EAAMT,OAAQC,IAAKY,EAAOZ,IAAKI,UAAWI,EAAMJ,WAClH,KAAKX,EAAW,MAAO,CAACI,KAAMe,EAAOf,KAAMC,KAAMU,EAAMV,KAAMC,OAAQS,EAAMT,OAAQC,IAAKQ,EAAMR,IAAKI,UAAWQ,EAAOR,WACrH,KAAKV,EAAK,MAAO,CAACG,KAAMW,EAAMX,KAAMC,KAAMU,EAAMV,KAAMC,OAAQa,EAAOb,OAAQC,IAAKQ,EAAMR,IAAKI,UAAWI,EAAMJ,WAC9G,KAAKT,EAAO,MAAO,CAACE,KAAMe,EAAOf,KAAMC,KAAMc,EAAOd,KAAMC,OAAQS,EAAMT,OAAQC,IAAKQ,EAAMR,IAAKI,UAAWI,EAAMJ,WACjH,QAAU,OAAOI,KAQNF,wOC9DA,SAASO,EAAeC,GAAc,IAC3CC,EAD2C,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAb,UAAAC,OAAAa,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAAhB,UAAAgB,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAE,MAAAJ,EAAAE,OAAAQ,EAAA,EAAAR,CAAAJ,IAAAa,KAAAC,MAAAZ,EAAA,CAAAI,MAAAS,OAAAP,MAG7Cf,MAAQ,CAAEuB,UAAWhB,EAAegB,WAHSb,EAAA,OAAAC,OAAAa,EAAA,EAAAb,CAAAJ,EAAAC,GAAAG,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,EAAAmB,IAAA,qBAAAC,MAAA,WAKxB,IAAAC,EAAAf,KACZA,KAAKb,MAAMuB,WACZjB,IAAeuB,KAAK,SAAAN,GAChBhB,EAAegB,UAAYA,EAC3BK,EAAKE,SAAS,CAAEP,kBATiB,CAAAG,IAAA,SAAAC,MAAA,WAapC,IACGJ,EAAcV,KAAKb,MAAnBuB,UACR,OAAIA,EACOQ,EAAAC,EAAAC,cAACV,EAAcV,KAAKqB,OAExB,SAlBkC3B,EAAA,CACpBgB,aAoB7B,OApBMhB,EACKgB,UAAY,KAmBhBhB,ECjBT,IAAM4B,EAAU9B,EAAe,kBAClBhC,EAAA+D,EAAA,GAAAP,KAAAxD,EAAAgE,KAAA,WAAoBR,KAAK,SAAAS,GAAM,OAAIA,EAAOC,YAIhDC,EAASnC,EAAe,kBACZhC,EAAA+D,EAAA,GAAAP,KAAAxD,EAAAgE,KAAA,WAAmBR,KAAK,SAAAS,GAAM,OAAIA,EAAOC,YAgB/CE,mLATX,OACEV,EAAAC,EAAAC,cAAA,OAAKS,GAAG,QACNX,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAACO,EAAD,cALiBG,IAAMpB,oBCDhBqB,mLARX,OACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAU/C,MAAOA,KACfiC,EAAAC,EAAAC,cAACa,EAAD,cAJUvB,oBCDEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.f42b834a.chunk.js","sourcesContent":["import $ from 'jquery'\nimport {createStore} from 'redux'\n\n\n\nconst DIGIT= 'DIGIT';\nconst OPERATION= 'OPERATION';\nconst CAL= 'CAL';\nconst CLEAR= 'CLEAR';\nconst initialState = {\n      prev : 0,\n      next : 0,\n      result : 0,\n      exp : Number($('#display').text()),\n      operation : '+'\n}\n\n\nexport function addDigit(next, exp) {\n  return {\n    type: DIGIT,\n    next: next,\n    exp: exp\n  }\n}\n\nexport function addOperation(prev, operation){\n  return{\n    type: OPERATION,\n    prev: prev,\n    operation: operation\n  }\n}\n\nexport function calculate(result){\n  return{\n    type: CAL,\n    result: result\n  }\n}\n\nexport function allClear(){\n  return{\n    type: CLEAR,\n    prev: 0,\n    next: 0\n  }\n}\n\n\nfunction reducer(state= initialState, action){\n  switch(action.type){\n    case DIGIT : return {prev: state.prev, next: action.next, result: state.result, exp: action.exp, operation: state.operation};\n    case OPERATION: return {prev: action.prev, next: state.next, result: state.result, exp: state.exp, operation: action.operation};\n    case CAL: return {prev: state.prev, next: state.next, result: action.result, exp: state.exp, operation: state.operation};\n    case CLEAR: return {prev: action.prev, next: action.next, result: state.result, exp: state.exp, operation: state.operation};\n    default : return state;\n  }\n}\n\n\n//Redux Store__________________________________________\nconst store = createStore(reducer);\n\nexport default store;\n","import React, { Component } from \"react\";\n\nexport default function asyncComponent(getComponent) {\n    class AsyncComponent extends Component {\n        static Component = null;\n        state = { Component: AsyncComponent.Component };\n\n        componentWillMount() {\n            if (!this.state.Component) {\n                getComponent().then(Component => {\n                    AsyncComponent.Component = Component\n                    this.setState({ Component })\n                })\n            }\n        }\n        render() {\n            const { Component } = this.state\n            if (Component) {\n                return <Component {...this.props} />\n            }\n            return null\n        }\n    }\n    return AsyncComponent;\n}\n","import React from 'react'\nimport asyncComponent from './asyncComponent/async';\n\n\n\n\n  const Display = asyncComponent(() =>\n          \t    import('./Display').then(module => module.default)\n          \t);\n\n\n   const KeyPad = asyncComponent(() =>\n                \t    import('./KeyPad').then(module => module.default)\n                \t);\n\n\n\nclass Calculator extends React.Component {\n  render() {\n    return(\n      <div id=\"calc\">\n        <Display />\n        <KeyPad />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux'\nimport './App.scss';\nimport Calculator from './components/Calculator.js'\nimport store from './redux/configureStore'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Calculator />\n       </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'babel-polyfill';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}